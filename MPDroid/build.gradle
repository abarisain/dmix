import java.awt.HeadlessException

/*
 * Copyright (C) 2010-2015 The MPDroid Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
}

def gitShortHash() {
    return "git rev-parse --short HEAD".execute().text.trim()
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.0"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 57
        versionName "1.08 Beta 3 " + gitShortHash()
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources true
        }
    }

    productFlavors {
        closedbits {
            versionName defaultConfig.versionName + "-c"
        }

        foss {
            versionName defaultConfig.versionName + "-f"
            ext.enableCrashlytics = false
        }
    }

    applicationVariants.all { final variant ->

        task("${variant.name}Javadoc", type: Javadoc) {
            title = "$name $versionName"
            description "Generates Javadoc for $variant.name."
            group "documentation"
            source = variant.javaCompile.source
            ext.androidJar =
                    "${android.sdkDirectory}" +
                            "/platforms/${android.compileSdkVersion}/android.jar"
            classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)

            gradle.taskGraph.addTaskExecutionListener new BrowseJavadoc(
                    mTask: "${variant.name}Javadoc",
                    mIndexFile: file("${destinationDir}/index.html"))

            dependsOn = [':JMPDCommAndroid:debugJavadoc'];

            options {
                author = true
                header = project.name
                memberLevel = JavadocMemberLevel.PRIVATE
                links("http://docs.oracle.com/javase/8/docs/api",
                        project.tasks.getByPath(":JMPDCommAndroid:debugJavadoc")
                                .getDestinationDir()
                                .toString());
                linksOffline("http://developer.android.com/reference",
                        "${android.sdkDirectory}/docs/reference");
                overview("src/main/overview.html");
                showAll()
            }

            exclude '**/BuildConfig.java'
            exclude '**/R.java'
        }
    }
}

dependencies {
    // Support Libraries
    compile 'com.android.support:support-v4:23.0.1'
    compile 'com.android.support:palette-v7:23.0.1'
    compile 'com.android.support:appcompat-v7:23.0.1'
    compile 'com.android.support:cardview-v7:23.0.1'
    compile 'com.android.support:design:23.0.1'
    // Projects
    compile project(':JMPDCommAndroid')
    // Libraries from maven
    compile 'asia.ivity.android:drag-sort-listview:1.0'
    closedbitsCompile('com.crashlytics.sdk.android:crashlytics:2.4.0@aar') {
        transitive = true
    }
}

class BrowseJavadoc implements TaskExecutionListener {

    String mTask

    File mIndexFile

    @Override
    void beforeExecute(final Task task) {
    }

    @Override
    void afterExecute(final Task task, final TaskState taskState) {
        if (taskState.executed && !taskState.failure && task.name.equals(mTask)) {
            println "Javadoc built: " + mIndexFile
            final def Class desktop = getClass().classLoader.loadClass("java.awt.Desktop")

            try {
                desktop.newInstance().browse(mIndexFile.toURI())
            } catch (final HeadlessException ignored) {
            }
        }
    }
}